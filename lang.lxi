%{
#include <math.h>
#include <stdio.h>
#include <string.h>
#include "parser.tab.h"
int lines = 0;
%}
%option noyywrap
%option caseless

DIGIT [0-9]
LETTER  [a-z]|[A-Z]
STRING  ["]({LETTER}|{DIGIT})*["]
NUMBER	[+|-]?[1-9]{DIGIT}*|0
CHAR [']({LETTER}|{DIGIT})[']
CONSTANT    {STRING}|{NUMBER}|{CHAR}
IDENTIFIER   _[a-zA-Z]+[0-9]*

INVALID_NUMBER [0]+{DIGIT}*
INVALID_IDENTIFIER  _[a-zA-Z]*[0-9]*[a-zA-Z]*
INVALID_CONSTANT {NUMBER}+{LETTER}+

%%

"{"	{printf( "Separator: %s\n", yytext ); return OPEN_CURLY_BRACKET;}
"}"	{printf( "Separator: %s\n", yytext ); return CLOSED_CURLY_BRACKET;}
"("	{printf( "Separator: %s\n", yytext ); return OPEN_ROUND_BRACKET;}
")"	{printf( "Separator: %s\n", yytext ); return CLOSED_ROUND_BRACKET;}
"["	{printf( "Separator: %s\n", yytext ); return OPEN_SQUARE_BRACKET;}
"]"	{printf( "Separator: %s\n", yytext ); return CLOSED_SQUARE_BRACKET;}
","	{printf( "Separator: %s\n", yytext ); return COMMA;}
";"	{printf( "Separator: %s\n", yytext ); return SEMICOLON;}
":"	{printf( "Separator: %s\n", yytext ); return COLON;}
">>" {printf( "Separator: %s\n", yytext ); return READ_SYMBOL;}
"<<" {printf( "Separator: %s\n", yytext ); return WRITE_SYMBOL;}

"+"	{printf( "Operator: %s\n", yytext ); return PLUS;}
"-"	{printf( "Operator: %s\n", yytext ); return MINUS;}
"*"	{printf( "Operator: %s\n", yytext ); return MULTIPLICATION;}
"/"	{printf( "Operator: %s\n", yytext ); return DIVISION;}
"="	{printf( "Operator: %s\n", yytext ); return ASSIGNMENT;}
"%"	{printf( "Operator: %s\n", yytext ); return MODULO;}
">"	{printf( "Operator: %s\n", yytext ); return GREATER_THAN;}
">=" {printf( "Operator: %s\n", yytext ); return GREATER_OR_EQUAL;}
"<"	{printf( "Operator: %s\n", yytext ); return LOWER_THAN;}
"<=" {printf( "Operator: %s\n", yytext ); return LOWER_OR_EQUAL;}
"==" {printf( "Operator: %s\n", yytext ); return EQUAL;}
"!="  {printf( "Operator: %s\n", yytext ); return NOT_EQUAL;}
"&&"  {printf( "Operator: %s\n", yytext ); return AND;}


"if" { printf("%s - reserved word\n", yytext); return IF;}
"for" { printf("%s - reserved word\n", yytext); return FOR;}
"else" { printf("%s - reserved word\n", yytext); return ELSE;}
"read" { printf("%s - reserved word\n", yytext); return READ;}
"write" { printf("%s - reserved word\n", yytext); return WRITE;}
"while" { printf("%s - reserved word\n", yytext); return WHILE;}
"in" { printf("%s - reserved word\n", yytext); return IN;}
"range" { printf("%s - reserved word\n", yytext); return RANGE;}
"integer" { printf("%s - reserved word\n", yytext); return INTEGER;}
"string" { printf("%s - reserved word\n", yytext); return STRING;}
"char" { printf("%s - reserved word\n", yytext); return CHAR;}
"main" { printf("%s - reserved word\n", yytext); return MAIN;}


{IDENTIFIER}	{printf( "Identifier: %s\n", yytext); return IDENTIFIER;}
{CONSTANT}	{printf( "Constant: %s\n", yytext ); return CONSTANT;}


[ \t]+	/* remove white spaces */  	{}
[\n]+	{++lines;}

{INVALID_IDENTIFIER} {printf("Illegal identifier %s at line %d\n", yytext, lines); return -1;}
{INVALID_NUMBER} {printf("Illegal number %s at line %d\n", yytext, lines); return -1;}
.|{INVALID_CONSTANT} {printf("Illegal symbol %s at line %d\n", yytext, lines); return -1;}

%%

